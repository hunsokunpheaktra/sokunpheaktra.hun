/**
 * Generate the request body send to Braintree
 * - Request Client token
 * - Request Create Customer
 * - Request Create Credit Card
 * - Request Create Transaction
 * - Receive the response XML from Braintree
 * @author Kakada Khan
 * @date 09-Oct-2014
 */

public class P2P_BraintreeServices {
    public static final integer REQUEST_TIMEOUT=4000;
    /** The URL for Branitree production*/
    private final String ENV_PRODUCTION = 'https://api.braintreegateway.com';
    /** The URL for Braintree sandbox*/
    private final String ENV_URL;
    /** The endpoint to create customer*/
    private final String SERVICE_TR ='/customers';
    /** The endpoint to get client token*/
    private final String SERVICE_CT ='/client_token';
    /** The endpoint to create credit card*/
    private final String SERVICE_PM ='/payment_methods';
    /** The endpoint to create transaction*/ 
    private final String SERVICE_TRANS = '/transactions';   
    /** The merchanPath at Braintree*/
    private String merchantPath = '/merchants/#merchantId#';
    /** The merchanURL to Briantree*/
    private String merchantURL = '';
    
    // BrainTree Credentials
    /** The Braintree merchantID*/
    private String merchantId;
    /** The Braintree public key*/
    private String publicKey;
    /** The Braintree private key*/
    private String privateKey;
    /** The Braintree Merchant Account ID*/
    private String merchantAccountID;
       
       
    /**
     * Constructor 
     * Identify the BrainTree SandBox or Production
     */
    public P2P_BraintreeServices(){
        // Initialize BrainTree infor (Getting from custom-setting)
        //BrainTree__c csBT       = BrainTree__c.getValues('BrainTree_UAT');
        BrainTree__c csBT       = BrainTree__c.getValues('BrainTree_Connection');
        merchantId              = csBT.get('MerchantId__c') +'';
        publicKey               = csBT.get('PublicKey__c') +'';
        privateKey              = csBT.get('PrivateKey__c') +'';  
        merchantAccountID		= csBT.get('MerchantAccountID__c') +''; 
        ENV_URL					= csBT.get('EnvURL__c') +''; 
    }
     
     
    /**
     * Create a transcation in Braintree
     * @param cardholderName is the CreditCard HolderName
     * @param accId is the 15 digits of account id
     * @param paymentMethodNonce is the payment-method-nonce generated by braintree
     * @param amount is the amount to create transaction
     */
     
    public TransactionParser createTransaction(String accId, String paymentMethodToken, String amount){
        /*  --------- Ex: Request transaction JSON ---------------
        {
            transaction: {
                amount: '100.00', 
                type: 'sale',
                customer-id: '123445',
                merchant-account-id: 'GumtreeUK_billed',
                payment-method-token: 'fs323',              
                options: {
                    submit-for-settlement : true                    
                }
            }
        } 
        */
        
        JSONGenerator gen = JSON.createGenerator(true);         
        // Write data to the JSON string.
        gen.writeStartObject();  
            gen.writeFieldName('transaction');
            gen.writeStartObject();          
                gen.writeStringField('amount', amount);  
                gen.writeStringField('type', 'sale');
                gen.writeStringField('customer-id',P2P_BraintreeHelper.getId15Digits(accId));
                gen.writeStringField('merchant-account-id', merchantAccountID);
                gen.writeStringField('payment-method-token', paymentMethodToken);
                
            	gen.writeFieldName('options');
                gen.writeStartObject(); 
                    gen.writeBooleanField('submit-for-settlement', true);
                gen.writeEndObject();
                                  
            gen.writeEndObject();//end transaction 
        gen.writeEndObject(); // End all  
     
        String requestBody = gen.getAsString();
        
        String res = callBrainTree(SERVICE_TRANS, requestBody, 'POST');
        return new TransactionParser(res); 
    }

      
    /**
     * Sending Http request to BrainTree
     * @param seriveName: The service at BrainTree (Ex: SERVICE_TR or SERVICE_CT)
     * @param requestBody: The body of the request in JSON format 
     * @param method: GET or POST
     * @return String getting the request to BrainTree
     */
    private String callBrainTree(String seriveName, String requestBody, String method){
        // Preparing End-Point
        merchantURL = ENV_URL + merchantPath + seriveName;
        merchantURL = merchantURL.replace('#merchantId#',merchantId);
           
        HttpRequest req = new HttpRequest();
        req.setEndpoint(merchantURL);
        req.setMethod(method);
      
        // Preparing Header Information 
        Blob headerValue = Blob.valueOf(publicKey + ':' + privateKey);
        req.setHeader('Authorization', EncodingUtil.base64Encode(headerValue));
        req.setHeader('User-Agent', 'Braintree Node 1.15.0');
        req.setHeader('Content-Type', 'application/json');
        req.setHeader('Accept', 'application/xml');
        req.setHeader('X-ApiVersion', '4');
        req.setTimeout(REQUEST_TIMEOUT);
        System.debug('=============requestBody==:\n'+requestBody);
        
        if(! String.isBlank(requestBody)) req.setBody(requestBody);
             
        // Sending the request and Recieving the response
        Http http = new Http();
        //HTTPResponse res = http.send(req);
        
        String responseBody = Test.isRunningTest() ? P2P_UnitTest.response4Test : (http.send(req)).getBody() ;
         
        System.debug('=============responseBody==:\n'+responseBody);
        return responseBody; 
    }
     
    
     
    /**
     * Calling from Scheduled Batch - Getting a customer infor from BrainTree
     * @param: accId is the id of a customer at BrainTree
     * @return CustomerParser
     */ 
    public CustomerParser getCustomer(String accId){
        accId = P2P_BraintreeHelper.getId15Digits(accId); 
        String res = callBrainTree(SERVICE_TR+'/'+accId, null, 'GET'); 
        return new CustomerParser(res,true);
    }
    
    
    
    
    /**
     *  Creating a Credit Card at BrainTree
     *  @param: paymentMethodNonce used as Token for creating a CreditCard
     *  @param: holderName is Card holder name
     *  @param: accId is the id of a customer at BrainTree
     *  @return CreditCartParser
     */
    public CreditCartParser createCreditCard(String paymentMethodNonce, String holderName, String accId, boolean isCard){
        accId = P2P_BraintreeHelper.getId15Digits(accId);
          
        // Preparing request body
        String requestBody ;
        /*  --------- Ex: Request JSON ---------------
            {
                payment-method: {
                    customer-id: 'aCustomerId', 
                    payment-method-nonce: 'aaaaa',
                    options : {
                        verify-card : true,
                        fail-on-duplicate-payment-method : true
                    } 
                }
            } 
            
        */  
    
        JSONGenerator gen = JSON.createGenerator(true); 
        
        // Write data to the JSON string.
        gen.writeStartObject();  
            gen.writeFieldName('payment-method');
            gen.writeStartObject();         
                gen.writeStringField('cardholder-name', holderName);
                gen.writeStringField('customer-id', accId);
                gen.writeStringField('payment-method-nonce', paymentMethodNonce);
                gen.writeFieldName('options');
                gen.writeStartObject();                     
                    //gen.writeBooleanField('verify-card', true); 
                    gen.writeBooleanField('fail-on-duplicate-payment-method', true);
                gen.writeEndObject();               
            gen.writeEndObject(); // End payment-method
        gen.writeEndObject(); // End all
     
        requestBody = gen.getAsString(); 
        
        // Callout
        String res = callBrainTree(SERVICE_PM, requestBody, 'POST'); 
        
        return new CreditCartParser(res,isCard); 
    }
    
    /**
     *  Delete a Credit Card at BrainTree
     *  @param: token used as Token for deleting a CreditCard
     *	@param: accid used as CustomerId for deleting a CreditCard
     *  @return CreditCartParser
     */
    public CreditCartParser deleteCreditCard(String token){
        String res = callBrainTree(SERVICE_PM+'/any/'+token, null, 'DELETE'); 
        
        return new CreditCartParser(res,true); 
    }
    
    
    
    
    /**
     * Requesting ClientToken
     * This request will start whenever the page first load.
     * After the response, the page refreshed with some hidden form values and paymentMethodNonce
     * @return ClientTokenParser
     */
    public ClientTokenParser getClientToken(){ 
        String requestBody = '{"client_token": {"version" : "2"}}';  
        String res = callBrainTree(SERVICE_CT, requestBody, 'POST'); 
        return new ClientTokenParser(res); 
    }
    
    
    /** 
     * TODO:
     * - Create a new customer at BrainTree side 
     * - Create a default Credit Card
     *
     *  @param: paymentMethodNonce used as Token for creating a CreditCard
     *  @param: holderName is Card holder name
     *  @param: acc is the Account to create at BrainTree
     *  @return CustomerParser
     */
    public CustomerParser createCustomer(String paymentMethodNonce, String holderName, Account acc, Boolean isCard){ 
         
        // Preparing request body
        String requestBody;  
        
        /*  --------- Ex: Request JSON ---------------
            {
                customer: {
                    id: 'aCustomerId', 
                    credit-card : {
                        cardholder-name : '',
                        paymentMethodNonce :'',
                        //verify-card : true
                    } 
                }
            } 
        ---------------------------------------------*/ 
        
        JSONGenerator gen = JSON.createGenerator(true); 
        
        // Write data to the JSON string.
        gen.writeStartObject(); 
            gen.writeFieldName('customer');
            gen.writeStartObject();
                gen.writeStringField('id', P2P_BraintreeHelper.getId15Digits(acc.Id));
                gen.writeStringField('company', acc.Name);
                gen.writeStringField('email', (acc.Finance_contact__c == null || acc.Finance_contact__r.Email == null)? '' : acc.Finance_contact__r.Email);
                gen.writeStringField('phone', (acc.Finance_contact__c == null || acc.Finance_contact__r.Phone == null)? '' : acc.Finance_contact__r.Phone);
        
                gen.writeFieldName('credit-card');
                gen.writeStartObject(); 
                    gen.writeStringField('cardholder-name', holderName);
                    //gen.writeBooleanField('verify-card', true); 
                    gen.writeStringField('paymentMethodNonce', paymentMethodNonce);         
                gen.writeEndObject();
                
            gen.writeEndObject(); // End customer 
        gen.writeEndObject(); // End all
    
        // Get the JSON string.
        requestBody = gen.getAsString();  
         
        String res = callBrainTree(SERVICE_TR, requestBody, 'POST');
        
        // Handle response
        return new CustomerParser(res,isCard); 
    }
    
     
    /* The Parent Class */
    public abstract Class XMLParser{        
        public Boolean isError;
        public String errorMsg;
        public DOM.XMLNode root; 
           
        public XMLParser(String xml){ root = getRootNode(xml); }
        
        private DOM.XMLNode getRootNode(String xml){
            DOM.Document doc = new DOM.Document();
            try{ doc.load(xml); }catch(Exception e){ return null;  }             
            return doc.getRootElement();
        }  
    }
     
     
    /* TODO: Parsing XML response when requesting  clientToken*/
    public Class ClientTokenParser extends XMLParser{
        public String clientToken;
        public ClientTokenParser(String xml){
            super(xml); 
            isError = (root == null || root.getName() != 'client-token' );
            errorMsg = isError ? xml : null; 
            clientToken = isError ? null : P2P_BraintreeHelper.getNode(root, 'client-token', 'client-token/value').getText(); 
        }
        
        /*   --------- Ex: Success response ---------
        <?xml version="1.0" encoding="UTF-8"?>
        <client-token>
          <value>eyJ2ZXJzaW9uIjoiMiIsImF1dGhvcml6YXRpb25GaW5nZXJwcmludCI6ImViOTU0NmVlNWMxMDc2ODVlNjU0ODNkNjcwZjI4MGM2YjBkOWUxNWFlYWRmZTkxMjFhOGQ2ZjBhZTkzNjJlOTF8Y3JlYXRlZF9hdD0yMDE0LTA3LTI5VDAyOjQxOjI2LjQ2MTgyNzk0NyswMDAwXHUwMDI2bWVyY2hhbnRfaWQ9bjdjcjR2NWdtNmd6c3NzZFx1MDAyNnB1YmxpY19rZXk9ZHg4ZDdiZjY3cXp2NzZyZiIsImNoYWxsZW5nZXMiOltdLCJjbGllbnRBcGlVcmwiOiJodHRwczovL2FwaS5zYW5kYm94LmJyYWludHJlZWdhdGV3YXkuY29tOjQ0My9tZXJjaGFudHMvbjdjcjR2NWdtNmd6c3NzZC9jbGllbnRfYXBpIiwiYXNzZXRzVXJsIjoiaHR0cHM6Ly9hc3NldHMuYnJhaW50cmVlZ2F0ZXdheS5jb20iLCJhdXRoVXJsIjoiaHR0cHM6Ly9hdXRoLnZlbm1vLnNhbmRib3guYnJhaW50cmVlZ2F0ZXdheS5jb20iLCJwYXltZW50QXBwU2NoZW1lcyI6W10sInRocmVlRFNlY3VyZUVuYWJsZWQiOmZhbHNlLCJwYXlwYWxFbmFibGVkIjp0cnVlLCJwYXlwYWwiOnsiZGlzcGxheU5hbWUiOiJnYWVhLXN5cy5jb20iLCJjbGllbnRJZCI6bnVsbCwicHJpdmFjeVVybCI6Imh0dHA6Ly9leGFtcGxlLmNvbS9wcCIsInVzZXJBZ3JlZW1lbnRVcmwiOiJodHRwOi8vZXhhbXBsZS5jb20vdG9zIiwiYmFzZVVybCI6Imh0dHBzOi8vYXNzZXRzLmJyYWludHJlZWdhdGV3YXkuY29tIiwiYXNzZXRzVXJsIjoiaHR0cHM6Ly9jaGVja291dC5wYXlwYWwuY29tIiwiZGlyZWN0QmFzZVVybCI6bnVsbCwiYWxsb3dIdHRwIjp0cnVlLCJlbnZpcm9ubWVudE5vTmV0d29yayI6dHJ1ZSwiZW52aXJvbm1lbnQiOiJvZmZsaW5lIn0sImFuYWx5dGljcyI6eyJ1cmwiOiJodHRwczovL2FwaS5zYW5kYm94LmJyYWludHJlZWdhdGV3YXkuY29tOjQ0My9tZXJjaGFudHMvbjdjcjR2NWdtNmd6c3NzZC9jbGllbnRfYXBpL2FuYWx5dGljcyJ9fQ==</value>
        </client-token> 
        ---------------------------------------------*/ 
    }
    
    
    /* TODO: Parsing XML response when requesting to create a new customer */
    public Class CustomerParser extends XMLParser{
        public String id;
        public String defaultPaymentMethodToken;
        public String paymentURL;
        public boolean defaultToken;
        public String masked;
        public String cardType;
        private boolean isCard;
        public CustomerParser(String xml,boolean isCard){
            super(xml);
            this.isCard = isCard;
            isError = (root == null || root.getName() == 'api-error-response' );
            errorMsg = isError ? getError() : null; 
            id = isError ? null : getId();
            defaultPaymentMethodToken = isError ? null : getDefaultPaymentMethodToken();
            paymentURL = isError ? '' : getPaymentURL(); 
            defaultToken = isError ? false : getDefaultToken();
            masked = isError ? '' : getMaskedNumber();
            cardType = isError ? '' : getCardType();
        }
        
        private String getId(){
            return P2P_BraintreeHelper.getNode(root, 'customer', 'customer/id').getText(); // <id>16681806</id> 
        }
        
        private String getDefaultPaymentMethodToken(){
            String token;
            if(isCard){
	            for(DOM.XMLNode card : P2P_BraintreeHelper.getNodes(root, 'customer/credit-cards')){
	                if(P2P_BraintreeHelper.getNode(card, 'credit-card', 'credit-card/default').getText() == 'true'){
	                    token = P2P_BraintreeHelper.getNode(card, 'credit-card', 'credit-card/token').getText();
	                    break;
	                } 
	            }
            }else{
            	for(DOM.XMLNode card : P2P_BraintreeHelper.getNodes(root, 'customer/paypal-accounts')){
	                token = P2P_BraintreeHelper.getNode(card, 'paypal-account', 'paypal-account/token').getText();
	            }
            }
            return token;
        }
        
        private String getPaymentURL(){ 
        	String pt;
        	if(isCard){
	            for(DOM.XMLNode card : P2P_BraintreeHelper.getNodes(root, 'customer/credit-cards')){
	            	pt = P2P_BraintreeHelper.getNode(card, 'credit-card', 'credit-card/image-url').getText();
	            }
        	}else{
        		for(DOM.XMLNode card : P2P_BraintreeHelper.getNodes(root, 'customer/paypal-accounts')){
	            	pt = P2P_BraintreeHelper.getNode(card, 'paypal-account', 'paypal-account/image-url').getText();
	            }
        	}
            return pt;
        }
        private String getCardType(){ 
        	if(!isCard)return '';
        	String pt;
            for(DOM.XMLNode card : P2P_BraintreeHelper.getNodes(root, 'customer/credit-cards')){
            	pt = P2P_BraintreeHelper.getNode(card, 'credit-card', 'credit-card/card-type').getText();
            }
            return pt;
        }
        
        private boolean getDefaultToken(){
        	Boolean pt;
        	if(isCard){
	            for(DOM.XMLNode card : P2P_BraintreeHelper.getNodes(root, 'customer/credit-cards')){
	            	pt = Boolean.valueOf(P2P_BraintreeHelper.getNode(card, 'credit-card', 'credit-card/default').getText());
	            }
        	}else{
        		for(DOM.XMLNode card : P2P_BraintreeHelper.getNodes(root, 'customer/paypal-accounts')){
	            	pt = Boolean.valueOf(P2P_BraintreeHelper.getNode(card, 'paypal-account', 'paypal-account/default').getText());
	            }
        	}
            return pt;    
        }
        public String getMaskedNumber(){
        	if(!isCard)return '';
        	String mask1;
        	String mask2;
        	for(DOM.XMLNode card : P2P_BraintreeHelper.getNodes(root, 'customer/credit-cards')){
            	mask1 = P2P_BraintreeHelper.getNode(card, 'credit-card', 'credit-card/bin').getText();
            	mask2 = P2P_BraintreeHelper.getNode(card, 'credit-card', 'credit-card/last-4').getText();
            }
        	return mask1+'******'+mask2;
        }
        
        
        private String getError(){
            DOM.XMLNode[] errors = new List<DOM.XMLNode>();
            
            // Errors
            for(DOM.XMLNode anError : P2P_BraintreeHelper.getNodes(root, 'api-error-response/errors/errors')) 
            errors.add(anError);  
            
            // Errors Customer
            for(DOM.XMLNode customerError : P2P_BraintreeHelper.getNodes(root, 'api-error-response/errors/customer/errors')) 
            errors.add(customerError); 
             
            // Errors Credit-Card 
            for(DOM.XMLNode cardError : P2P_BraintreeHelper.getNodes(root, 'api-error-response/errors/customer/credit-card/errors'))  
            errors.add(cardError);
            
            // Errors transaction 
        //  for(DOM.XMLNode tranError : P2P_BraintreeHelper.getNodes(root, 'api-error-response/errors/transaction/errors'))  
        //  errors.add(tranError);
            
            return P2P_BraintreeHelper.getErrorString(errors);   
        }
         
        /*  --------- Ex: Success response ---------
        <?xml version="1.0" encoding="UTF-8"?>
        <customer>
              <id>16681806</id> 
              <credit-cards type="array">
                    <credit-card> 
                      <default type="boolean">true</default> 
                      <token>k55x6b</token> 
                    </credit-card>
                    <credit-card> 
                      <default type="boolean">false</default> 
                      <token>k55x6b</token> 
                    </credit-card>
              </credit-cards> 
        </customer>  
        
        
        --------- Ex: Error response ---------
        <?xml version="1.0" encoding="UTF-8"?>
        <api-error-response>
          <errors>
            <errors type="array"/>
            <customer>
              <errors type="array">
                <error>
                  <code>91609</code>
                  <attribute type="symbol">id</attribute>
                  <message>Customer ID has already been taken.</message>
                </error>
              </errors>
              <credit-card>
                <errors type="array"/>
              </credit-card>
            </customer>
          </errors> 
        </api-error-response>
         
        ---------------------------------------------*/  
    }  
    
    
    /* TODO: Parsing XML response when requesting to create a new Credit Card */ 
    public Class CreditCartParser extends XMLParser{
        public String token;
        public String paymentURL;
        public boolean defaultToken;
        public String masked;
        public String cardType;
        private boolean isCard;
        public CreditCartParser(String xml,boolean isCard){
            super(xml);
            this.isCard = isCard;
            isError = (root == null || root.getName() == 'api-error-response' );
            errorMsg = isError ? getErrors() : null;            
            token = isError ? '' : getToken();  
            paymentURL = isError ? '' : getPaymentURL(); 
            defaultToken = isError ? false : getDefaultToken();
            masked = isError ? '' : getMaskedNumber();
            cardType = isError ? '' : getCardType();
        }
        
        private String getToken(){
        	if(isCard){ 
            	return P2P_BraintreeHelper.getNode(root, 'credit-card', 'credit-card/token').getText(); // <token>3dgdf4</token>
        	}else{
        		return P2P_BraintreeHelper.getNode(root, 'paypal-account', 'paypal-account/token').getText(); // <token>3dgdf4</token>
        	}    
        }
        private String getCardType(){ 
        	if(!isCard)return '';
            return P2P_BraintreeHelper.getNode(root, 'credit-card', 'credit-card/card-type').getText();  
        }
        private String getPaymentURL(){ 
        	if(isCard){
            	return P2P_BraintreeHelper.getNode(root, 'credit-card', 'credit-card/image-url').getText();
        	}else{
        		return P2P_BraintreeHelper.getNode(root, 'paypal-account', 'paypal-account/image-url').getText();
        	}    
        }
        private boolean getDefaultToken(){
        	if(isCard){ 
            	return Boolean.valueOf(P2P_BraintreeHelper.getNode(root, 'credit-card', 'credit-card/default').getText());
        	}else{
        		return Boolean.valueOf(P2P_BraintreeHelper.getNode(root, 'paypal-account', 'paypal-account/default').getText());
        	}    
        }
        private String getMaskedNumber(){
        	if(!isCard)return '';
        	String mask1;
        	String mask2;
        	mask1 = P2P_BraintreeHelper.getNode(root, 'credit-card', 'credit-card/bin').getText();
        	mask2 = P2P_BraintreeHelper.getNode(root, 'credit-card', 'credit-card/last-4').getText();
        	return mask1+'******'+mask2;
        }
        private String getErrors(){
            DOM.XMLNode[] errors = new List<DOM.XMLNode>();
            
             // Errors
            for(DOM.XMLNode anErr : P2P_BraintreeHelper.getNodes(root, 'api-error-response/errors/errors')) 
            errors.add(anErr);
             
            // Errors Credit-Card
            for(DOM.XMLNode cardErr : P2P_BraintreeHelper.getNodes(root, 'api-error-response/errors/credit-card/errors')) 
            errors.add(cardErr); 
             
            DOM.XMLNode message = P2P_BraintreeHelper.getNode(root, 'api-error-response', 'api-error-response/message'); 
            
            return (errors.isEmpty() && message != null) ? message.getText() : P2P_BraintreeHelper.getErrorString(errors);           
        }
        /*  --------- Ex: Error response ---------
            <?xml version="1.0" encoding="UTF-8"?>
            <api-error-response>
                  <errors>
                        <errors type="array"/>
                        <credit-card>
                              <errors type="array">
                                    <error>
                                          <code>81713</code>
                                          <attribute type="symbol">expiration_year</attribute>
                                          <message>Expiration year is invalid.</message>
                                    </error>
                                    <error>
                                          <code>81712</code>
                                          <attribute type="symbol">expiration_month</attribute>
                                          <message>Expiration month is invalid.</message>
                                    </error> 
                              </errors>
                        </credit-card>
                  </errors> 
            </api-error-response>
            
            -----Another error response-------
        <api-error-response>
              <errors>
                <errors type="array"/>
              </errors>
              <params> 
              </params>
              <message>Do Not Honor</message> 
        </api-error-response>
        ---------------------------------------------*/
        
    } 
    
    
    /*****************************************************************/

    /* TODO: Parsing XML response when requesting to create a new transaction */ 
    public Class TransactionParser extends XMLParser{
        
        public TransactionParser(String xml){
            super(xml);
            isError = (root == null || root.getName() == 'api-error-response' );
            errorMsg = isError ? getErrors() : null; 
        }
        
        private String getErrors(){
            DOM.XMLNode[] errors = new List<DOM.XMLNode>();
            
             // Errors
            for(DOM.XMLNode anErr : P2P_BraintreeHelper.getNodes(root, 'api-error-response/errors/errors')) 
            errors.add(anErr);
             
            // Errors Credit-Card
            for(DOM.XMLNode cardErr : P2P_BraintreeHelper.getNodes(root, 'api-error-response/errors/credit-card/errors')) 
            errors.add(cardErr); 
            
            // Errors transaction 
                for(DOM.XMLNode tranError : P2P_BraintreeHelper.getNodes(root, 'api-error-response/errors/transaction/errors'))  
                errors.add(tranError);
            
            DOM.XMLNode message = P2P_BraintreeHelper.getNode(root, 'api-error-response', 'api-error-response/message'); 
            
            return (errors.isEmpty() && message != null) ? message.getText() : P2P_BraintreeHelper.getErrorString(errors);           
        }       
    }



	//-=============== test create customer ===========//
	public String testCreateCustomer(Account acc){ 
        String requestBody;  
        JSONGenerator gen = JSON.createGenerator(true); 
        
        // Write data to the JSON string.
        gen.writeStartObject(); 
            gen.writeFieldName('customer');
            gen.writeStartObject();
                gen.writeStringField('id', P2P_BraintreeHelper.getId15Digits(acc.Id));
                gen.writeStringField('company', acc.Name);
                gen.writeStringField('email', (acc.Finance_contact__c == null || acc.Finance_contact__r.Email == null)? '' : acc.Finance_contact__r.Email);
                gen.writeStringField('phone', (acc.Finance_contact__c == null || acc.Finance_contact__r.Phone == null)? '' : acc.Finance_contact__r.Phone);
            gen.writeEndObject(); // End customer 
        gen.writeEndObject(); // End all
    
        requestBody = gen.getAsString();  
        String res = callBrainTree(SERVICE_TR, requestBody, 'POST');
        return res;
    }

	 public String testCreateCreditCard(String paymentMethodNonce, String holderName, String accId, boolean isCard){
        accId = P2P_BraintreeHelper.getId15Digits(accId);
        String requestBody ;
        JSONGenerator gen = JSON.createGenerator(true); 
        
        // Write data to the JSON string.
        gen.writeStartObject();  
            gen.writeFieldName('payment-method');
            gen.writeStartObject();         
                gen.writeStringField('cardholder-name', holderName);
                gen.writeStringField('customer-id', accId);
                gen.writeStringField('payment-method-nonce', paymentMethodNonce);
                gen.writeFieldName('options');
                gen.writeStartObject();                     
                    //gen.writeBooleanField('verify-card', true); 
                    gen.writeBooleanField('fail-on-duplicate-payment-method', true);
                gen.writeEndObject();               
            gen.writeEndObject(); // End payment-method
        gen.writeEndObject(); // End all
     
        requestBody = gen.getAsString(); 
        
        // Callout
        String res = callBrainTree(SERVICE_PM, requestBody, 'POST'); 
        
        return res;
    }
}